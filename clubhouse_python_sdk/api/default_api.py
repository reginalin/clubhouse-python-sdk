"""
    Clubhouse API

    Clubhouse API  # noqa: E501

    The version of the OpenAPI document: 3.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from clubhouse_python_sdk.api_client import ApiClient, Endpoint as _Endpoint
from clubhouse_python_sdk.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from clubhouse_python_sdk.model.category import Category
from clubhouse_python_sdk.model.comment import Comment
from clubhouse_python_sdk.model.create_category import CreateCategory
from clubhouse_python_sdk.model.create_comment import CreateComment
from clubhouse_python_sdk.model.create_comment_comment import CreateCommentComment
from clubhouse_python_sdk.model.create_entity_template import CreateEntityTemplate
from clubhouse_python_sdk.model.create_epic import CreateEpic
from clubhouse_python_sdk.model.create_epic_comment import CreateEpicComment
from clubhouse_python_sdk.model.create_files import CreateFiles
from clubhouse_python_sdk.model.create_group import CreateGroup
from clubhouse_python_sdk.model.create_iteration import CreateIteration
from clubhouse_python_sdk.model.create_label_params import CreateLabelParams
from clubhouse_python_sdk.model.create_linked_file import CreateLinkedFile
from clubhouse_python_sdk.model.create_milestone import CreateMilestone
from clubhouse_python_sdk.model.create_or_delete_reaction import CreateOrDeleteReaction
from clubhouse_python_sdk.model.create_project import CreateProject
from clubhouse_python_sdk.model.create_stories import CreateStories
from clubhouse_python_sdk.model.create_story_link import CreateStoryLink
from clubhouse_python_sdk.model.create_story_params import CreateStoryParams
from clubhouse_python_sdk.model.create_task import CreateTask
from clubhouse_python_sdk.model.delete_stories import DeleteStories
from clubhouse_python_sdk.model.entity_template import EntityTemplate
from clubhouse_python_sdk.model.epic import Epic
from clubhouse_python_sdk.model.epic_search_results import EpicSearchResults
from clubhouse_python_sdk.model.epic_slim import EpicSlim
from clubhouse_python_sdk.model.epic_workflow import EpicWorkflow
from clubhouse_python_sdk.model.file import File
from clubhouse_python_sdk.model.get_epic_stories import GetEpicStories
from clubhouse_python_sdk.model.get_iteration_stories import GetIterationStories
from clubhouse_python_sdk.model.get_label_stories import GetLabelStories
from clubhouse_python_sdk.model.get_member import GetMember
from clubhouse_python_sdk.model.get_project_stories import GetProjectStories
from clubhouse_python_sdk.model.group import Group
from clubhouse_python_sdk.model.iteration import Iteration
from clubhouse_python_sdk.model.iteration_slim import IterationSlim
from clubhouse_python_sdk.model.label import Label
from clubhouse_python_sdk.model.linked_file import LinkedFile
from clubhouse_python_sdk.model.list_epics import ListEpics
from clubhouse_python_sdk.model.list_labels import ListLabels
from clubhouse_python_sdk.model.list_members import ListMembers
from clubhouse_python_sdk.model.max_search_results_exceeded_error import MaxSearchResultsExceededError
from clubhouse_python_sdk.model.member import Member
from clubhouse_python_sdk.model.member_info import MemberInfo
from clubhouse_python_sdk.model.milestone import Milestone
from clubhouse_python_sdk.model.project import Project
from clubhouse_python_sdk.model.reaction import Reaction
from clubhouse_python_sdk.model.repository import Repository
from clubhouse_python_sdk.model.search import Search
from clubhouse_python_sdk.model.search_results import SearchResults
from clubhouse_python_sdk.model.search_stories import SearchStories
from clubhouse_python_sdk.model.story import Story
from clubhouse_python_sdk.model.story_link import StoryLink
from clubhouse_python_sdk.model.story_search_results import StorySearchResults
from clubhouse_python_sdk.model.story_slim import StorySlim
from clubhouse_python_sdk.model.task import Task
from clubhouse_python_sdk.model.team import Team
from clubhouse_python_sdk.model.threaded_comment import ThreadedComment
from clubhouse_python_sdk.model.update_category import UpdateCategory
from clubhouse_python_sdk.model.update_comment import UpdateComment
from clubhouse_python_sdk.model.update_entity_template import UpdateEntityTemplate
from clubhouse_python_sdk.model.update_epic import UpdateEpic
from clubhouse_python_sdk.model.update_file import UpdateFile
from clubhouse_python_sdk.model.update_group import UpdateGroup
from clubhouse_python_sdk.model.update_iteration import UpdateIteration
from clubhouse_python_sdk.model.update_label import UpdateLabel
from clubhouse_python_sdk.model.update_linked_file import UpdateLinkedFile
from clubhouse_python_sdk.model.update_milestone import UpdateMilestone
from clubhouse_python_sdk.model.update_project import UpdateProject
from clubhouse_python_sdk.model.update_stories import UpdateStories
from clubhouse_python_sdk.model.update_story import UpdateStory
from clubhouse_python_sdk.model.update_story_link import UpdateStoryLink
from clubhouse_python_sdk.model.update_task import UpdateTask
from clubhouse_python_sdk.model.workflow import Workflow


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __api_v3_categories_category_public_id_delete(
            self,
            category_public_id,
            **kwargs
        ):
            """Delete Category  # noqa: E501

            Delete Category can be used to delete any Category.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_categories_category_public_id_delete(category_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                category_public_id (int): The unique ID of the Category.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['category_public_id'] = \
                category_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_categories_category_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/categories/{category-public-id}',
                'operation_id': 'api_v3_categories_category_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'category_public_id',
                ],
                'required': [
                    'category_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'category_public_id':
                        (int,),
                },
                'attribute_map': {
                    'category_public_id': 'category-public-id',
                },
                'location_map': {
                    'category_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_categories_category_public_id_delete
        )

        def __api_v3_categories_category_public_id_get(
            self,
            category_public_id,
            **kwargs
        ):
            """Get Category  # noqa: E501

            Get Category returns information about the selected Category.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_categories_category_public_id_get(category_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                category_public_id (int): The unique ID of the Category.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Category
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['category_public_id'] = \
                category_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_categories_category_public_id_get = _Endpoint(
            settings={
                'response_type': (Category,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/categories/{category-public-id}',
                'operation_id': 'api_v3_categories_category_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'category_public_id',
                ],
                'required': [
                    'category_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'category_public_id':
                        (int,),
                },
                'attribute_map': {
                    'category_public_id': 'category-public-id',
                },
                'location_map': {
                    'category_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_categories_category_public_id_get
        )

        def __api_v3_categories_category_public_id_milestones_get(
            self,
            category_public_id,
            **kwargs
        ):
            """List Category Milestones  # noqa: E501

            List Category Milestones returns a list of all Milestones with the Category.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_categories_category_public_id_milestones_get(category_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                category_public_id (int): The unique ID of the Category.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Milestone]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['category_public_id'] = \
                category_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_categories_category_public_id_milestones_get = _Endpoint(
            settings={
                'response_type': ([Milestone],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/categories/{category-public-id}/milestones',
                'operation_id': 'api_v3_categories_category_public_id_milestones_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'category_public_id',
                ],
                'required': [
                    'category_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'category_public_id':
                        (int,),
                },
                'attribute_map': {
                    'category_public_id': 'category-public-id',
                },
                'location_map': {
                    'category_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_categories_category_public_id_milestones_get
        )

        def __api_v3_categories_category_public_id_put(
            self,
            category_public_id,
            update_category,
            **kwargs
        ):
            """Update Category  # noqa: E501

            Update Category allows you to replace a Category name with another name. If you try to name a Category something that already exists, you will receive a 422 response.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_categories_category_public_id_put(category_public_id, update_category, async_req=True)
            >>> result = thread.get()

            Args:
                category_public_id (int): The unique ID of the Category you wish to update.
                update_category (UpdateCategory):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Category
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['category_public_id'] = \
                category_public_id
            kwargs['update_category'] = \
                update_category
            return self.call_with_http_info(**kwargs)

        self.api_v3_categories_category_public_id_put = _Endpoint(
            settings={
                'response_type': (Category,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/categories/{category-public-id}',
                'operation_id': 'api_v3_categories_category_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'category_public_id',
                    'update_category',
                ],
                'required': [
                    'category_public_id',
                    'update_category',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'category_public_id':
                        (int,),
                    'update_category':
                        (UpdateCategory,),
                },
                'attribute_map': {
                    'category_public_id': 'category-public-id',
                },
                'location_map': {
                    'category_public_id': 'path',
                    'update_category': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_categories_category_public_id_put
        )

        def __api_v3_categories_get(
            self,
            **kwargs
        ):
            """List Categories  # noqa: E501

            List Categories returns a list of all Categories and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_categories_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Category]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_categories_get = _Endpoint(
            settings={
                'response_type': ([Category],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/categories',
                'operation_id': 'api_v3_categories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_categories_get
        )

        def __api_v3_categories_post(
            self,
            create_category,
            **kwargs
        ):
            """Create Category  # noqa: E501

            Create Category allows you to create a new Category in Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_categories_post(create_category, async_req=True)
            >>> result = thread.get()

            Args:
                create_category (CreateCategory):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Category
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_category'] = \
                create_category
            return self.call_with_http_info(**kwargs)

        self.api_v3_categories_post = _Endpoint(
            settings={
                'response_type': (Category,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/categories',
                'operation_id': 'api_v3_categories_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_category',
                ],
                'required': [
                    'create_category',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_category':
                        (CreateCategory,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_category': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_categories_post
        )

        def __api_v3_entity_templates_disable_put(
            self,
            **kwargs
        ):
            """Disable Story Templates  # noqa: E501

            Disables the Story Template feature for the given Organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_entity_templates_disable_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_entity_templates_disable_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/entity-templates/disable',
                'operation_id': 'api_v3_entity_templates_disable_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_entity_templates_disable_put
        )

        def __api_v3_entity_templates_enable_put(
            self,
            **kwargs
        ):
            """Enable Story Templates  # noqa: E501

            Enables the Story Template feature for the given Organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_entity_templates_enable_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_entity_templates_enable_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/entity-templates/enable',
                'operation_id': 'api_v3_entity_templates_enable_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_entity_templates_enable_put
        )

        def __api_v3_entity_templates_entity_template_public_id_delete(
            self,
            entity_template_public_id,
            **kwargs
        ):
            """Delete Entity Template  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_entity_templates_entity_template_public_id_delete(entity_template_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                entity_template_public_id (str): The unique ID of the entity template.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity_template_public_id'] = \
                entity_template_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_entity_templates_entity_template_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/entity-templates/{entity-template-public-id}',
                'operation_id': 'api_v3_entity_templates_entity_template_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_template_public_id',
                ],
                'required': [
                    'entity_template_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_template_public_id':
                        (str,),
                },
                'attribute_map': {
                    'entity_template_public_id': 'entity-template-public-id',
                },
                'location_map': {
                    'entity_template_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_entity_templates_entity_template_public_id_delete
        )

        def __api_v3_entity_templates_entity_template_public_id_get(
            self,
            entity_template_public_id,
            **kwargs
        ):
            """Get Entity Template  # noqa: E501

            Get Entity Template returns information about a given entity template.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_entity_templates_entity_template_public_id_get(entity_template_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                entity_template_public_id (str): The unique ID of the entity template.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EntityTemplate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity_template_public_id'] = \
                entity_template_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_entity_templates_entity_template_public_id_get = _Endpoint(
            settings={
                'response_type': (EntityTemplate,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/entity-templates/{entity-template-public-id}',
                'operation_id': 'api_v3_entity_templates_entity_template_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_template_public_id',
                ],
                'required': [
                    'entity_template_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_template_public_id':
                        (str,),
                },
                'attribute_map': {
                    'entity_template_public_id': 'entity-template-public-id',
                },
                'location_map': {
                    'entity_template_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_entity_templates_entity_template_public_id_get
        )

        def __api_v3_entity_templates_entity_template_public_id_put(
            self,
            entity_template_public_id,
            update_entity_template,
            **kwargs
        ):
            """Update Entity Template  # noqa: E501

            Update an entity template's name or its contents.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_entity_templates_entity_template_public_id_put(entity_template_public_id, update_entity_template, async_req=True)
            >>> result = thread.get()

            Args:
                entity_template_public_id (str): The unique ID of the template to be updated.
                update_entity_template (UpdateEntityTemplate): Request parameters for changing either a template's name or any of   the attributes it is designed to pre-populate.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EntityTemplate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['entity_template_public_id'] = \
                entity_template_public_id
            kwargs['update_entity_template'] = \
                update_entity_template
            return self.call_with_http_info(**kwargs)

        self.api_v3_entity_templates_entity_template_public_id_put = _Endpoint(
            settings={
                'response_type': (EntityTemplate,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/entity-templates/{entity-template-public-id}',
                'operation_id': 'api_v3_entity_templates_entity_template_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'entity_template_public_id',
                    'update_entity_template',
                ],
                'required': [
                    'entity_template_public_id',
                    'update_entity_template',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'entity_template_public_id':
                        (str,),
                    'update_entity_template':
                        (UpdateEntityTemplate,),
                },
                'attribute_map': {
                    'entity_template_public_id': 'entity-template-public-id',
                },
                'location_map': {
                    'entity_template_public_id': 'path',
                    'update_entity_template': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_entity_templates_entity_template_public_id_put
        )

        def __api_v3_entity_templates_get(
            self,
            **kwargs
        ):
            """List Entity Templates.  # noqa: E501

            List all the entity templates for an organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_entity_templates_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [EntityTemplate]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_entity_templates_get = _Endpoint(
            settings={
                'response_type': ([EntityTemplate],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/entity-templates',
                'operation_id': 'api_v3_entity_templates_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_entity_templates_get
        )

        def __api_v3_entity_templates_post(
            self,
            create_entity_template,
            **kwargs
        ):
            """Create Entity Template  # noqa: E501

            Create a new entity template for your organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_entity_templates_post(create_entity_template, async_req=True)
            >>> result = thread.get()

            Args:
                create_entity_template (CreateEntityTemplate): Request paramaters for creating an entirely new entity template.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EntityTemplate
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_entity_template'] = \
                create_entity_template
            return self.call_with_http_info(**kwargs)

        self.api_v3_entity_templates_post = _Endpoint(
            settings={
                'response_type': (EntityTemplate,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/entity-templates',
                'operation_id': 'api_v3_entity_templates_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_entity_template',
                ],
                'required': [
                    'create_entity_template',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_entity_template':
                        (CreateEntityTemplate,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_entity_template': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_entity_templates_post
        )

        def __api_v3_epic_workflow_get(
            self,
            **kwargs
        ):
            """Get Epic Workflow  # noqa: E501

            Get Epic Workflow returns the Epic Workflow for the organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epic_workflow_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EpicWorkflow
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_epic_workflow_get = _Endpoint(
            settings={
                'response_type': (EpicWorkflow,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epic-workflow',
                'operation_id': 'api_v3_epic_workflow_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_epic_workflow_get
        )

        def __api_v3_epics_epic_public_id_comments_comment_public_id_delete(
            self,
            epic_public_id,
            comment_public_id,
            **kwargs
        ):
            """Delete Epic Comment  # noqa: E501

            This endpoint allows you to delete a Comment from an Epic.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_comments_comment_public_id_delete(epic_public_id, comment_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The ID of the associated Epic.
                comment_public_id (int): The ID of the Comment.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_comments_comment_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}',
                'operation_id': 'api_v3_epics_epic_public_id_comments_comment_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                    'comment_public_id',
                ],
                'required': [
                    'epic_public_id',
                    'comment_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                    'comment_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_comments_comment_public_id_delete
        )

        def __api_v3_epics_epic_public_id_comments_comment_public_id_get(
            self,
            epic_public_id,
            comment_public_id,
            **kwargs
        ):
            """Get Epic Comment  # noqa: E501

            This endpoint returns information about the selected Epic Comment.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_comments_comment_public_id_get(epic_public_id, comment_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The ID of the associated Epic.
                comment_public_id (int): The ID of the Comment.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ThreadedComment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_comments_comment_public_id_get = _Endpoint(
            settings={
                'response_type': (ThreadedComment,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}',
                'operation_id': 'api_v3_epics_epic_public_id_comments_comment_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                    'comment_public_id',
                ],
                'required': [
                    'epic_public_id',
                    'comment_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                    'comment_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_comments_comment_public_id_get
        )

        def __api_v3_epics_epic_public_id_comments_comment_public_id_post(
            self,
            epic_public_id,
            comment_public_id,
            create_comment_comment,
            **kwargs
        ):
            """Create Epic Comment Comment  # noqa: E501

            This endpoint allows you to create a nested Comment reply to an existing Epic Comment.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_comments_comment_public_id_post(epic_public_id, comment_public_id, create_comment_comment, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The ID of the associated Epic.
                comment_public_id (int): The ID of the parent Epic Comment.
                create_comment_comment (CreateCommentComment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ThreadedComment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            kwargs['create_comment_comment'] = \
                create_comment_comment
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_comments_comment_public_id_post = _Endpoint(
            settings={
                'response_type': (ThreadedComment,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}',
                'operation_id': 'api_v3_epics_epic_public_id_comments_comment_public_id_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                    'comment_public_id',
                    'create_comment_comment',
                ],
                'required': [
                    'epic_public_id',
                    'comment_public_id',
                    'create_comment_comment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                    'create_comment_comment':
                        (CreateCommentComment,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                    'comment_public_id': 'path',
                    'create_comment_comment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_comments_comment_public_id_post
        )

        def __api_v3_epics_epic_public_id_comments_comment_public_id_put(
            self,
            epic_public_id,
            comment_public_id,
            update_comment,
            **kwargs
        ):
            """Update Epic Comment  # noqa: E501

            This endpoint allows you to update a threaded Comment on an Epic.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_comments_comment_public_id_put(epic_public_id, comment_public_id, update_comment, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The ID of the associated Epic.
                comment_public_id (int): The ID of the Comment.
                update_comment (UpdateComment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ThreadedComment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            kwargs['update_comment'] = \
                update_comment
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_comments_comment_public_id_put = _Endpoint(
            settings={
                'response_type': (ThreadedComment,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}/comments/{comment-public-id}',
                'operation_id': 'api_v3_epics_epic_public_id_comments_comment_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                    'comment_public_id',
                    'update_comment',
                ],
                'required': [
                    'epic_public_id',
                    'comment_public_id',
                    'update_comment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                    'update_comment':
                        (UpdateComment,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                    'comment_public_id': 'path',
                    'update_comment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_comments_comment_public_id_put
        )

        def __api_v3_epics_epic_public_id_comments_get(
            self,
            epic_public_id,
            **kwargs
        ):
            """List Epic Comments  # noqa: E501

            Get a list of all Comments on an Epic.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_comments_get(epic_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The unique ID of the Epic.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [ThreadedComment]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_comments_get = _Endpoint(
            settings={
                'response_type': ([ThreadedComment],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}/comments',
                'operation_id': 'api_v3_epics_epic_public_id_comments_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                ],
                'required': [
                    'epic_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_comments_get
        )

        def __api_v3_epics_epic_public_id_comments_post(
            self,
            epic_public_id,
            create_epic_comment,
            **kwargs
        ):
            """Create Epic Comment  # noqa: E501

            This endpoint allows you to create a threaded Comment on an Epic.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_comments_post(epic_public_id, create_epic_comment, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The ID of the associated Epic.
                create_epic_comment (CreateEpicComment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                ThreadedComment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            kwargs['create_epic_comment'] = \
                create_epic_comment
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_comments_post = _Endpoint(
            settings={
                'response_type': (ThreadedComment,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}/comments',
                'operation_id': 'api_v3_epics_epic_public_id_comments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                    'create_epic_comment',
                ],
                'required': [
                    'epic_public_id',
                    'create_epic_comment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                    'create_epic_comment':
                        (CreateEpicComment,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                    'create_epic_comment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_comments_post
        )

        def __api_v3_epics_epic_public_id_delete(
            self,
            epic_public_id,
            **kwargs
        ):
            """Delete Epic  # noqa: E501

            Delete Epic can be used to delete the Epic. The only required parameter is Epic ID.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_delete(epic_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The unique ID of the Epic.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}',
                'operation_id': 'api_v3_epics_epic_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                ],
                'required': [
                    'epic_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_delete
        )

        def __api_v3_epics_epic_public_id_get(
            self,
            epic_public_id,
            **kwargs
        ):
            """Get Epic  # noqa: E501

            Get Epic returns information about the selected Epic.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_get(epic_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The unique ID of the Epic.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Epic
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_get = _Endpoint(
            settings={
                'response_type': (Epic,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}',
                'operation_id': 'api_v3_epics_epic_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                ],
                'required': [
                    'epic_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_get
        )

        def __api_v3_epics_epic_public_id_put(
            self,
            epic_public_id,
            update_epic,
            **kwargs
        ):
            """Update Epic  # noqa: E501

            Update Epic can be used to update numerous fields in the Epic. The only required parameter is Epic ID, which can be found in the Clubhouse UI.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_put(epic_public_id, update_epic, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The unique ID of the Epic.
                update_epic (UpdateEpic):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Epic
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            kwargs['update_epic'] = \
                update_epic
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_put = _Endpoint(
            settings={
                'response_type': (Epic,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}',
                'operation_id': 'api_v3_epics_epic_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                    'update_epic',
                ],
                'required': [
                    'epic_public_id',
                    'update_epic',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                    'update_epic':
                        (UpdateEpic,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                    'update_epic': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_put
        )

        def __api_v3_epics_epic_public_id_stories_get(
            self,
            epic_public_id,
            get_epic_stories,
            **kwargs
        ):
            """List Epic Stories  # noqa: E501

            Get a list of all Stories in an Epic.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_epic_public_id_stories_get(epic_public_id, get_epic_stories, async_req=True)
            >>> result = thread.get()

            Args:
                epic_public_id (int): The unique ID of the Epic.
                get_epic_stories (GetEpicStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorySlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['epic_public_id'] = \
                epic_public_id
            kwargs['get_epic_stories'] = \
                get_epic_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_epic_public_id_stories_get = _Endpoint(
            settings={
                'response_type': ([StorySlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics/{epic-public-id}/stories',
                'operation_id': 'api_v3_epics_epic_public_id_stories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'epic_public_id',
                    'get_epic_stories',
                ],
                'required': [
                    'epic_public_id',
                    'get_epic_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'epic_public_id':
                        (int,),
                    'get_epic_stories':
                        (GetEpicStories,),
                },
                'attribute_map': {
                    'epic_public_id': 'epic-public-id',
                },
                'location_map': {
                    'epic_public_id': 'path',
                    'get_epic_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_epics_epic_public_id_stories_get
        )

        def __api_v3_epics_get(
            self,
            list_epics,
            **kwargs
        ):
            """List Epics  # noqa: E501

            List Epics returns a list of all Epics and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_get(list_epics, async_req=True)
            >>> result = thread.get()

            Args:
                list_epics (ListEpics):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [EpicSlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_epics'] = \
                list_epics
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_get = _Endpoint(
            settings={
                'response_type': ([EpicSlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics',
                'operation_id': 'api_v3_epics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_epics',
                ],
                'required': [
                    'list_epics',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_epics':
                        (ListEpics,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_epics': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_epics_get
        )

        def __api_v3_epics_post(
            self,
            create_epic,
            **kwargs
        ):
            """Create Epic  # noqa: E501

            Create Epic allows you to create a new Epic in Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_epics_post(create_epic, async_req=True)
            >>> result = thread.get()

            Args:
                create_epic (CreateEpic):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Epic
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_epic'] = \
                create_epic
            return self.call_with_http_info(**kwargs)

        self.api_v3_epics_post = _Endpoint(
            settings={
                'response_type': (Epic,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/epics',
                'operation_id': 'api_v3_epics_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_epic',
                ],
                'required': [
                    'create_epic',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_epic':
                        (CreateEpic,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_epic': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_epics_post
        )

        def __api_v3_files_file_public_id_delete(
            self,
            file_public_id,
            **kwargs
        ):
            """Delete File  # noqa: E501

            Delete File can be used to delete any previously attached File.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_files_file_public_id_delete(file_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                file_public_id (int): The File’s unique ID.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['file_public_id'] = \
                file_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_files_file_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/files/{file-public-id}',
                'operation_id': 'api_v3_files_file_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'file_public_id',
                ],
                'required': [
                    'file_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'file_public_id':
                        (int,),
                },
                'attribute_map': {
                    'file_public_id': 'file-public-id',
                },
                'location_map': {
                    'file_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_files_file_public_id_delete
        )

        def __api_v3_files_file_public_id_get(
            self,
            file_public_id,
            **kwargs
        ):
            """Get File  # noqa: E501

            Get File returns information about the selected File.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_files_file_public_id_get(file_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                file_public_id (int): The File’s unique ID.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                File
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['file_public_id'] = \
                file_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_files_file_public_id_get = _Endpoint(
            settings={
                'response_type': (File,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/files/{file-public-id}',
                'operation_id': 'api_v3_files_file_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'file_public_id',
                ],
                'required': [
                    'file_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'file_public_id':
                        (int,),
                },
                'attribute_map': {
                    'file_public_id': 'file-public-id',
                },
                'location_map': {
                    'file_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_files_file_public_id_get
        )

        def __api_v3_files_file_public_id_put(
            self,
            file_public_id,
            update_file,
            **kwargs
        ):
            """Update File  # noqa: E501

            Update File can used to update the properties of a file uploaded to Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_files_file_public_id_put(file_public_id, update_file, async_req=True)
            >>> result = thread.get()

            Args:
                file_public_id (int): The unique ID assigned to the file in Clubhouse.
                update_file (UpdateFile):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                File
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['file_public_id'] = \
                file_public_id
            kwargs['update_file'] = \
                update_file
            return self.call_with_http_info(**kwargs)

        self.api_v3_files_file_public_id_put = _Endpoint(
            settings={
                'response_type': (File,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/files/{file-public-id}',
                'operation_id': 'api_v3_files_file_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'file_public_id',
                    'update_file',
                ],
                'required': [
                    'file_public_id',
                    'update_file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'file_public_id':
                        (int,),
                    'update_file':
                        (UpdateFile,),
                },
                'attribute_map': {
                    'file_public_id': 'file-public-id',
                },
                'location_map': {
                    'file_public_id': 'path',
                    'update_file': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_files_file_public_id_put
        )

        def __api_v3_files_get(
            self,
            **kwargs
        ):
            """List Files  # noqa: E501

            List Files returns a list of all Files and related attributes in your Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_files_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [File]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_files_get = _Endpoint(
            settings={
                'response_type': ([File],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/files',
                'operation_id': 'api_v3_files_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_files_get
        )

        def __api_v3_files_post(
            self,
            create_files,
            **kwargs
        ):
            """Create Files  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_files_post(create_files, async_req=True)
            >>> result = thread.get()

            Args:
                create_files (CreateFiles):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [File]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_files'] = \
                create_files
            return self.call_with_http_info(**kwargs)

        self.api_v3_files_post = _Endpoint(
            settings={
                'response_type': ([File],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/files',
                'operation_id': 'api_v3_files_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_files',
                ],
                'required': [
                    'create_files',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_files':
                        (CreateFiles,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_files': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_files_post
        )

        def __api_v3_groups_disable_put(
            self,
            **kwargs
        ):
            """Disable Groups  # noqa: E501

            Disables Groups for the current workspace2  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_groups_disable_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_groups_disable_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/groups/disable',
                'operation_id': 'api_v3_groups_disable_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_groups_disable_put
        )

        def __api_v3_groups_enable_put(
            self,
            **kwargs
        ):
            """Enable Groups  # noqa: E501

            Enables Groups for the current workspace2  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_groups_enable_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_groups_enable_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/groups/enable',
                'operation_id': 'api_v3_groups_enable_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_groups_enable_put
        )

        def __api_v3_groups_get(
            self,
            **kwargs
        ):
            """List Groups  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_groups_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Group]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_groups_get = _Endpoint(
            settings={
                'response_type': ([Group],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/groups',
                'operation_id': 'api_v3_groups_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_groups_get
        )

        def __api_v3_groups_group_public_id_get(
            self,
            group_public_id,
            **kwargs
        ):
            """Get Group  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_groups_group_public_id_get(group_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                group_public_id (str): The unique ID of the Group.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Group
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group_public_id'] = \
                group_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_groups_group_public_id_get = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/groups/{group-public-id}',
                'operation_id': 'api_v3_groups_group_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group_public_id',
                ],
                'required': [
                    'group_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group_public_id':
                        (str,),
                },
                'attribute_map': {
                    'group_public_id': 'group-public-id',
                },
                'location_map': {
                    'group_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_groups_group_public_id_get
        )

        def __api_v3_groups_group_public_id_put(
            self,
            group_public_id,
            update_group,
            **kwargs
        ):
            """Update Group  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_groups_group_public_id_put(group_public_id, update_group, async_req=True)
            >>> result = thread.get()

            Args:
                group_public_id (str): The unique ID of the Group.
                update_group (UpdateGroup):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Group
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group_public_id'] = \
                group_public_id
            kwargs['update_group'] = \
                update_group
            return self.call_with_http_info(**kwargs)

        self.api_v3_groups_group_public_id_put = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/groups/{group-public-id}',
                'operation_id': 'api_v3_groups_group_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group_public_id',
                    'update_group',
                ],
                'required': [
                    'group_public_id',
                    'update_group',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group_public_id':
                        (str,),
                    'update_group':
                        (UpdateGroup,),
                },
                'attribute_map': {
                    'group_public_id': 'group-public-id',
                },
                'location_map': {
                    'group_public_id': 'path',
                    'update_group': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_groups_group_public_id_put
        )

        def __api_v3_groups_post(
            self,
            create_group,
            **kwargs
        ):
            """Create Group  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_groups_post(create_group, async_req=True)
            >>> result = thread.get()

            Args:
                create_group (CreateGroup):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Group
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_group'] = \
                create_group
            return self.call_with_http_info(**kwargs)

        self.api_v3_groups_post = _Endpoint(
            settings={
                'response_type': (Group,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/groups',
                'operation_id': 'api_v3_groups_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_group',
                ],
                'required': [
                    'create_group',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_group':
                        (CreateGroup,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_group': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_groups_post
        )

        def __api_v3_iterations_disable_put(
            self,
            **kwargs
        ):
            """Disable Iterations  # noqa: E501

            Disables Iterations for the current workspace  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_disable_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_disable_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations/disable',
                'operation_id': 'api_v3_iterations_disable_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_iterations_disable_put
        )

        def __api_v3_iterations_enable_put(
            self,
            **kwargs
        ):
            """Enable Iterations  # noqa: E501

            Enables Iterations for the current workspace  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_enable_put(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_enable_put = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations/enable',
                'operation_id': 'api_v3_iterations_enable_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_iterations_enable_put
        )

        def __api_v3_iterations_get(
            self,
            **kwargs
        ):
            """List Iterations  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [IterationSlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_get = _Endpoint(
            settings={
                'response_type': ([IterationSlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations',
                'operation_id': 'api_v3_iterations_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_iterations_get
        )

        def __api_v3_iterations_iteration_public_id_delete(
            self,
            iteration_public_id,
            **kwargs
        ):
            """Delete Iteration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_iteration_public_id_delete(iteration_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                iteration_public_id (int): The unique ID of the Iteration.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['iteration_public_id'] = \
                iteration_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_iteration_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations/{iteration-public-id}',
                'operation_id': 'api_v3_iterations_iteration_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'iteration_public_id',
                ],
                'required': [
                    'iteration_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'iteration_public_id':
                        (int,),
                },
                'attribute_map': {
                    'iteration_public_id': 'iteration-public-id',
                },
                'location_map': {
                    'iteration_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_iterations_iteration_public_id_delete
        )

        def __api_v3_iterations_iteration_public_id_get(
            self,
            iteration_public_id,
            **kwargs
        ):
            """Get Iteration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_iteration_public_id_get(iteration_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                iteration_public_id (int): The unique ID of the Iteration.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Iteration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['iteration_public_id'] = \
                iteration_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_iteration_public_id_get = _Endpoint(
            settings={
                'response_type': (Iteration,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations/{iteration-public-id}',
                'operation_id': 'api_v3_iterations_iteration_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'iteration_public_id',
                ],
                'required': [
                    'iteration_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'iteration_public_id':
                        (int,),
                },
                'attribute_map': {
                    'iteration_public_id': 'iteration-public-id',
                },
                'location_map': {
                    'iteration_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_iterations_iteration_public_id_get
        )

        def __api_v3_iterations_iteration_public_id_put(
            self,
            iteration_public_id,
            update_iteration,
            **kwargs
        ):
            """Update Iteration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_iteration_public_id_put(iteration_public_id, update_iteration, async_req=True)
            >>> result = thread.get()

            Args:
                iteration_public_id (int): The unique ID of the Iteration.
                update_iteration (UpdateIteration):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Iteration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['iteration_public_id'] = \
                iteration_public_id
            kwargs['update_iteration'] = \
                update_iteration
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_iteration_public_id_put = _Endpoint(
            settings={
                'response_type': (Iteration,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations/{iteration-public-id}',
                'operation_id': 'api_v3_iterations_iteration_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'iteration_public_id',
                    'update_iteration',
                ],
                'required': [
                    'iteration_public_id',
                    'update_iteration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'iteration_public_id':
                        (int,),
                    'update_iteration':
                        (UpdateIteration,),
                },
                'attribute_map': {
                    'iteration_public_id': 'iteration-public-id',
                },
                'location_map': {
                    'iteration_public_id': 'path',
                    'update_iteration': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_iterations_iteration_public_id_put
        )

        def __api_v3_iterations_iteration_public_id_stories_get(
            self,
            iteration_public_id,
            get_iteration_stories,
            **kwargs
        ):
            """List Iteration Stories  # noqa: E501

            Get a list of all Stories in an Iteration.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_iteration_public_id_stories_get(iteration_public_id, get_iteration_stories, async_req=True)
            >>> result = thread.get()

            Args:
                iteration_public_id (int): The unique ID of the Iteration.
                get_iteration_stories (GetIterationStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorySlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['iteration_public_id'] = \
                iteration_public_id
            kwargs['get_iteration_stories'] = \
                get_iteration_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_iteration_public_id_stories_get = _Endpoint(
            settings={
                'response_type': ([StorySlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations/{iteration-public-id}/stories',
                'operation_id': 'api_v3_iterations_iteration_public_id_stories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'iteration_public_id',
                    'get_iteration_stories',
                ],
                'required': [
                    'iteration_public_id',
                    'get_iteration_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'iteration_public_id':
                        (int,),
                    'get_iteration_stories':
                        (GetIterationStories,),
                },
                'attribute_map': {
                    'iteration_public_id': 'iteration-public-id',
                },
                'location_map': {
                    'iteration_public_id': 'path',
                    'get_iteration_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_iterations_iteration_public_id_stories_get
        )

        def __api_v3_iterations_post(
            self,
            create_iteration,
            **kwargs
        ):
            """Create Iteration  # noqa: E501

            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_iterations_post(create_iteration, async_req=True)
            >>> result = thread.get()

            Args:
                create_iteration (CreateIteration):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Iteration
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_iteration'] = \
                create_iteration
            return self.call_with_http_info(**kwargs)

        self.api_v3_iterations_post = _Endpoint(
            settings={
                'response_type': (Iteration,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/iterations',
                'operation_id': 'api_v3_iterations_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_iteration',
                ],
                'required': [
                    'create_iteration',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_iteration':
                        (CreateIteration,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_iteration': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_iterations_post
        )

        def __api_v3_labels_get(
            self,
            list_labels,
            **kwargs
        ):
            """List Labels  # noqa: E501

            List Labels returns a list of all Labels and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_labels_get(list_labels, async_req=True)
            >>> result = thread.get()

            Args:
                list_labels (ListLabels):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Label]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_labels'] = \
                list_labels
            return self.call_with_http_info(**kwargs)

        self.api_v3_labels_get = _Endpoint(
            settings={
                'response_type': ([Label],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/labels',
                'operation_id': 'api_v3_labels_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_labels',
                ],
                'required': [
                    'list_labels',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_labels':
                        (ListLabels,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_labels': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_labels_get
        )

        def __api_v3_labels_label_public_id_delete(
            self,
            label_public_id,
            **kwargs
        ):
            """Delete Label  # noqa: E501

            Delete Label can be used to delete any Label.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_labels_label_public_id_delete(label_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                label_public_id (int): The unique ID of the Label.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['label_public_id'] = \
                label_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_labels_label_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/labels/{label-public-id}',
                'operation_id': 'api_v3_labels_label_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'label_public_id',
                ],
                'required': [
                    'label_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'label_public_id':
                        (int,),
                },
                'attribute_map': {
                    'label_public_id': 'label-public-id',
                },
                'location_map': {
                    'label_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_labels_label_public_id_delete
        )

        def __api_v3_labels_label_public_id_epics_get(
            self,
            label_public_id,
            **kwargs
        ):
            """List Label Epics  # noqa: E501

            List all of the Epics with the Label.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_labels_label_public_id_epics_get(label_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                label_public_id (int): The unique ID of the Label.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [EpicSlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['label_public_id'] = \
                label_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_labels_label_public_id_epics_get = _Endpoint(
            settings={
                'response_type': ([EpicSlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/labels/{label-public-id}/epics',
                'operation_id': 'api_v3_labels_label_public_id_epics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'label_public_id',
                ],
                'required': [
                    'label_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'label_public_id':
                        (int,),
                },
                'attribute_map': {
                    'label_public_id': 'label-public-id',
                },
                'location_map': {
                    'label_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_labels_label_public_id_epics_get
        )

        def __api_v3_labels_label_public_id_get(
            self,
            label_public_id,
            **kwargs
        ):
            """Get Label  # noqa: E501

            Get Label returns information about the selected Label.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_labels_label_public_id_get(label_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                label_public_id (int): The unique ID of the Label.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Label
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['label_public_id'] = \
                label_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_labels_label_public_id_get = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/labels/{label-public-id}',
                'operation_id': 'api_v3_labels_label_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'label_public_id',
                ],
                'required': [
                    'label_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'label_public_id':
                        (int,),
                },
                'attribute_map': {
                    'label_public_id': 'label-public-id',
                },
                'location_map': {
                    'label_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_labels_label_public_id_get
        )

        def __api_v3_labels_label_public_id_put(
            self,
            label_public_id,
            update_label,
            **kwargs
        ):
            """Update Label  # noqa: E501

            Update Label allows you to replace a Label name with another name. If you try to name a Label something that already exists, you will receive a 422 response.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_labels_label_public_id_put(label_public_id, update_label, async_req=True)
            >>> result = thread.get()

            Args:
                label_public_id (int): The unique ID of the Label you wish to update.
                update_label (UpdateLabel):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Label
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['label_public_id'] = \
                label_public_id
            kwargs['update_label'] = \
                update_label
            return self.call_with_http_info(**kwargs)

        self.api_v3_labels_label_public_id_put = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/labels/{label-public-id}',
                'operation_id': 'api_v3_labels_label_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'label_public_id',
                    'update_label',
                ],
                'required': [
                    'label_public_id',
                    'update_label',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'label_public_id':
                        (int,),
                    'update_label':
                        (UpdateLabel,),
                },
                'attribute_map': {
                    'label_public_id': 'label-public-id',
                },
                'location_map': {
                    'label_public_id': 'path',
                    'update_label': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_labels_label_public_id_put
        )

        def __api_v3_labels_label_public_id_stories_get(
            self,
            label_public_id,
            get_label_stories,
            **kwargs
        ):
            """List Label Stories  # noqa: E501

            List all of the Stories with the Label.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_labels_label_public_id_stories_get(label_public_id, get_label_stories, async_req=True)
            >>> result = thread.get()

            Args:
                label_public_id (int): The unique ID of the Label.
                get_label_stories (GetLabelStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorySlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['label_public_id'] = \
                label_public_id
            kwargs['get_label_stories'] = \
                get_label_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_labels_label_public_id_stories_get = _Endpoint(
            settings={
                'response_type': ([StorySlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/labels/{label-public-id}/stories',
                'operation_id': 'api_v3_labels_label_public_id_stories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'label_public_id',
                    'get_label_stories',
                ],
                'required': [
                    'label_public_id',
                    'get_label_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'label_public_id':
                        (int,),
                    'get_label_stories':
                        (GetLabelStories,),
                },
                'attribute_map': {
                    'label_public_id': 'label-public-id',
                },
                'location_map': {
                    'label_public_id': 'path',
                    'get_label_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_labels_label_public_id_stories_get
        )

        def __api_v3_labels_post(
            self,
            create_label_params,
            **kwargs
        ):
            """Create Label  # noqa: E501

            Create Label allows you to create a new Label in Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_labels_post(create_label_params, async_req=True)
            >>> result = thread.get()

            Args:
                create_label_params (CreateLabelParams): Request parameters for creating a Label on a Clubhouse story.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Label
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_label_params'] = \
                create_label_params
            return self.call_with_http_info(**kwargs)

        self.api_v3_labels_post = _Endpoint(
            settings={
                'response_type': (Label,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/labels',
                'operation_id': 'api_v3_labels_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_label_params',
                ],
                'required': [
                    'create_label_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_label_params':
                        (CreateLabelParams,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_label_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_labels_post
        )

        def __api_v3_linked_files_get(
            self,
            **kwargs
        ):
            """List Linked Files  # noqa: E501

            List Linked Files returns a list of all Linked-Files and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_linked_files_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [LinkedFile]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_linked_files_get = _Endpoint(
            settings={
                'response_type': ([LinkedFile],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/linked-files',
                'operation_id': 'api_v3_linked_files_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_linked_files_get
        )

        def __api_v3_linked_files_linked_file_public_id_delete(
            self,
            linked_file_public_id,
            **kwargs
        ):
            """Delete Linked File  # noqa: E501

            Delete Linked File can be used to delete any previously attached Linked-File.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_linked_files_linked_file_public_id_delete(linked_file_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                linked_file_public_id (int): The unique identifier of the linked file.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['linked_file_public_id'] = \
                linked_file_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_linked_files_linked_file_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/linked-files/{linked-file-public-id}',
                'operation_id': 'api_v3_linked_files_linked_file_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'linked_file_public_id',
                ],
                'required': [
                    'linked_file_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'linked_file_public_id':
                        (int,),
                },
                'attribute_map': {
                    'linked_file_public_id': 'linked-file-public-id',
                },
                'location_map': {
                    'linked_file_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_linked_files_linked_file_public_id_delete
        )

        def __api_v3_linked_files_linked_file_public_id_get(
            self,
            linked_file_public_id,
            **kwargs
        ):
            """Get Linked File  # noqa: E501

            Get File returns information about the selected Linked File.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_linked_files_linked_file_public_id_get(linked_file_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                linked_file_public_id (int): The unique identifier of the linked file.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LinkedFile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['linked_file_public_id'] = \
                linked_file_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_linked_files_linked_file_public_id_get = _Endpoint(
            settings={
                'response_type': (LinkedFile,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/linked-files/{linked-file-public-id}',
                'operation_id': 'api_v3_linked_files_linked_file_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'linked_file_public_id',
                ],
                'required': [
                    'linked_file_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'linked_file_public_id':
                        (int,),
                },
                'attribute_map': {
                    'linked_file_public_id': 'linked-file-public-id',
                },
                'location_map': {
                    'linked_file_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_linked_files_linked_file_public_id_get
        )

        def __api_v3_linked_files_linked_file_public_id_put(
            self,
            linked_file_public_id,
            update_linked_file,
            **kwargs
        ):
            """Update Linked File  # noqa: E501

            Updated Linked File allows you to update properties of a previously attached Linked-File.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_linked_files_linked_file_public_id_put(linked_file_public_id, update_linked_file, async_req=True)
            >>> result = thread.get()

            Args:
                linked_file_public_id (int): The unique identifier of the linked file.
                update_linked_file (UpdateLinkedFile):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LinkedFile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['linked_file_public_id'] = \
                linked_file_public_id
            kwargs['update_linked_file'] = \
                update_linked_file
            return self.call_with_http_info(**kwargs)

        self.api_v3_linked_files_linked_file_public_id_put = _Endpoint(
            settings={
                'response_type': (LinkedFile,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/linked-files/{linked-file-public-id}',
                'operation_id': 'api_v3_linked_files_linked_file_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'linked_file_public_id',
                    'update_linked_file',
                ],
                'required': [
                    'linked_file_public_id',
                    'update_linked_file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'linked_file_public_id':
                        (int,),
                    'update_linked_file':
                        (UpdateLinkedFile,),
                },
                'attribute_map': {
                    'linked_file_public_id': 'linked-file-public-id',
                },
                'location_map': {
                    'linked_file_public_id': 'path',
                    'update_linked_file': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_linked_files_linked_file_public_id_put
        )

        def __api_v3_linked_files_post(
            self,
            create_linked_file,
            **kwargs
        ):
            """Create Linked File  # noqa: E501

            Create Linked File allows you to create a new Linked File in Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_linked_files_post(create_linked_file, async_req=True)
            >>> result = thread.get()

            Args:
                create_linked_file (CreateLinkedFile):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                LinkedFile
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_linked_file'] = \
                create_linked_file
            return self.call_with_http_info(**kwargs)

        self.api_v3_linked_files_post = _Endpoint(
            settings={
                'response_type': (LinkedFile,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/linked-files',
                'operation_id': 'api_v3_linked_files_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_linked_file',
                ],
                'required': [
                    'create_linked_file',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_linked_file':
                        (CreateLinkedFile,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_linked_file': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_linked_files_post
        )

        def __api_v3_member_get(
            self,
            **kwargs
        ):
            """Get Current Member Info  # noqa: E501

            Returns information about the authenticated member.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_member_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                MemberInfo
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_member_get = _Endpoint(
            settings={
                'response_type': (MemberInfo,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/member',
                'operation_id': 'api_v3_member_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_member_get
        )

        def __api_v3_members_get(
            self,
            list_members,
            **kwargs
        ):
            """List Members  # noqa: E501

            List Members returns information about members of the organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_members_get(list_members, async_req=True)
            >>> result = thread.get()

            Args:
                list_members (ListMembers):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Member]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['list_members'] = \
                list_members
            return self.call_with_http_info(**kwargs)

        self.api_v3_members_get = _Endpoint(
            settings={
                'response_type': ([Member],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/members',
                'operation_id': 'api_v3_members_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_members',
                ],
                'required': [
                    'list_members',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_members':
                        (ListMembers,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'list_members': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_members_get
        )

        def __api_v3_members_member_public_id_get(
            self,
            member_public_id,
            get_member,
            **kwargs
        ):
            """Get Member  # noqa: E501

            Returns information about a Member.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_members_member_public_id_get(member_public_id, get_member, async_req=True)
            >>> result = thread.get()

            Args:
                member_public_id (str): The Member's unique ID.
                get_member (GetMember):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Member
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['member_public_id'] = \
                member_public_id
            kwargs['get_member'] = \
                get_member
            return self.call_with_http_info(**kwargs)

        self.api_v3_members_member_public_id_get = _Endpoint(
            settings={
                'response_type': (Member,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/members/{member-public-id}',
                'operation_id': 'api_v3_members_member_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'member_public_id',
                    'get_member',
                ],
                'required': [
                    'member_public_id',
                    'get_member',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'member_public_id':
                        (str,),
                    'get_member':
                        (GetMember,),
                },
                'attribute_map': {
                    'member_public_id': 'member-public-id',
                },
                'location_map': {
                    'member_public_id': 'path',
                    'get_member': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_members_member_public_id_get
        )

        def __api_v3_milestones_get(
            self,
            **kwargs
        ):
            """List Milestones  # noqa: E501

            List Milestones returns a list of all Milestones and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_milestones_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Milestone]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_milestones_get = _Endpoint(
            settings={
                'response_type': ([Milestone],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/milestones',
                'operation_id': 'api_v3_milestones_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_milestones_get
        )

        def __api_v3_milestones_milestone_public_id_delete(
            self,
            milestone_public_id,
            **kwargs
        ):
            """Delete Milestone  # noqa: E501

            Delete Milestone can be used to delete any Milestone.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_milestones_milestone_public_id_delete(milestone_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                milestone_public_id (int): The ID of the Milestone.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['milestone_public_id'] = \
                milestone_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_milestones_milestone_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/milestones/{milestone-public-id}',
                'operation_id': 'api_v3_milestones_milestone_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'milestone_public_id',
                ],
                'required': [
                    'milestone_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'milestone_public_id':
                        (int,),
                },
                'attribute_map': {
                    'milestone_public_id': 'milestone-public-id',
                },
                'location_map': {
                    'milestone_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_milestones_milestone_public_id_delete
        )

        def __api_v3_milestones_milestone_public_id_epics_get(
            self,
            milestone_public_id,
            **kwargs
        ):
            """List Milestone Epics  # noqa: E501

            List all of the Epics within the Milestone.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_milestones_milestone_public_id_epics_get(milestone_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                milestone_public_id (int): The ID of the Milestone.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [EpicSlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['milestone_public_id'] = \
                milestone_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_milestones_milestone_public_id_epics_get = _Endpoint(
            settings={
                'response_type': ([EpicSlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/milestones/{milestone-public-id}/epics',
                'operation_id': 'api_v3_milestones_milestone_public_id_epics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'milestone_public_id',
                ],
                'required': [
                    'milestone_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'milestone_public_id':
                        (int,),
                },
                'attribute_map': {
                    'milestone_public_id': 'milestone-public-id',
                },
                'location_map': {
                    'milestone_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_milestones_milestone_public_id_epics_get
        )

        def __api_v3_milestones_milestone_public_id_get(
            self,
            milestone_public_id,
            **kwargs
        ):
            """Get Milestone  # noqa: E501

            Get Milestone returns information about a chosen Milestone.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_milestones_milestone_public_id_get(milestone_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                milestone_public_id (int): The ID of the Milestone.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Milestone
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['milestone_public_id'] = \
                milestone_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_milestones_milestone_public_id_get = _Endpoint(
            settings={
                'response_type': (Milestone,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/milestones/{milestone-public-id}',
                'operation_id': 'api_v3_milestones_milestone_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'milestone_public_id',
                ],
                'required': [
                    'milestone_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'milestone_public_id':
                        (int,),
                },
                'attribute_map': {
                    'milestone_public_id': 'milestone-public-id',
                },
                'location_map': {
                    'milestone_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_milestones_milestone_public_id_get
        )

        def __api_v3_milestones_milestone_public_id_put(
            self,
            milestone_public_id,
            update_milestone,
            **kwargs
        ):
            """Update Milestone  # noqa: E501

            Update Milestone can be used to update Milestone properties.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_milestones_milestone_public_id_put(milestone_public_id, update_milestone, async_req=True)
            >>> result = thread.get()

            Args:
                milestone_public_id (int): The ID of the Milestone.
                update_milestone (UpdateMilestone):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Milestone
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['milestone_public_id'] = \
                milestone_public_id
            kwargs['update_milestone'] = \
                update_milestone
            return self.call_with_http_info(**kwargs)

        self.api_v3_milestones_milestone_public_id_put = _Endpoint(
            settings={
                'response_type': (Milestone,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/milestones/{milestone-public-id}',
                'operation_id': 'api_v3_milestones_milestone_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'milestone_public_id',
                    'update_milestone',
                ],
                'required': [
                    'milestone_public_id',
                    'update_milestone',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'milestone_public_id':
                        (int,),
                    'update_milestone':
                        (UpdateMilestone,),
                },
                'attribute_map': {
                    'milestone_public_id': 'milestone-public-id',
                },
                'location_map': {
                    'milestone_public_id': 'path',
                    'update_milestone': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_milestones_milestone_public_id_put
        )

        def __api_v3_milestones_post(
            self,
            create_milestone,
            **kwargs
        ):
            """Create Milestone  # noqa: E501

            Create Milestone allows you to create a new Milestone in Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_milestones_post(create_milestone, async_req=True)
            >>> result = thread.get()

            Args:
                create_milestone (CreateMilestone):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Milestone
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_milestone'] = \
                create_milestone
            return self.call_with_http_info(**kwargs)

        self.api_v3_milestones_post = _Endpoint(
            settings={
                'response_type': (Milestone,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/milestones',
                'operation_id': 'api_v3_milestones_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_milestone',
                ],
                'required': [
                    'create_milestone',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_milestone':
                        (CreateMilestone,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_milestone': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_milestones_post
        )

        def __api_v3_projects_get(
            self,
            **kwargs
        ):
            """List Projects  # noqa: E501

            List Projects returns a list of all Projects and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_projects_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Project]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_projects_get = _Endpoint(
            settings={
                'response_type': ([Project],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/projects',
                'operation_id': 'api_v3_projects_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_projects_get
        )

        def __api_v3_projects_post(
            self,
            create_project,
            **kwargs
        ):
            """Create Project  # noqa: E501

            Create Project is used to create a new Clubhouse Project.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_projects_post(create_project, async_req=True)
            >>> result = thread.get()

            Args:
                create_project (CreateProject):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_project'] = \
                create_project
            return self.call_with_http_info(**kwargs)

        self.api_v3_projects_post = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/projects',
                'operation_id': 'api_v3_projects_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_project',
                ],
                'required': [
                    'create_project',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_project':
                        (CreateProject,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_project': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_projects_post
        )

        def __api_v3_projects_project_public_id_delete(
            self,
            project_public_id,
            **kwargs
        ):
            """Delete Project  # noqa: E501

            Delete Project can be used to delete a Project. Projects can only be deleted if all associated Stories are moved or deleted. In the case that the Project cannot be deleted, you will receive a 422 response.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_projects_project_public_id_delete(project_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_public_id (int): The unique ID of the Project.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_public_id'] = \
                project_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_projects_project_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/projects/{project-public-id}',
                'operation_id': 'api_v3_projects_project_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_public_id',
                ],
                'required': [
                    'project_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_public_id':
                        (int,),
                },
                'attribute_map': {
                    'project_public_id': 'project-public-id',
                },
                'location_map': {
                    'project_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_projects_project_public_id_delete
        )

        def __api_v3_projects_project_public_id_get(
            self,
            project_public_id,
            **kwargs
        ):
            """Get Project  # noqa: E501

            Get Project returns information about the selected Project.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_projects_project_public_id_get(project_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                project_public_id (int): The unique ID of the Project.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_public_id'] = \
                project_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_projects_project_public_id_get = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/projects/{project-public-id}',
                'operation_id': 'api_v3_projects_project_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_public_id',
                ],
                'required': [
                    'project_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_public_id':
                        (int,),
                },
                'attribute_map': {
                    'project_public_id': 'project-public-id',
                },
                'location_map': {
                    'project_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_projects_project_public_id_get
        )

        def __api_v3_projects_project_public_id_put(
            self,
            project_public_id,
            update_project,
            **kwargs
        ):
            """Update Project  # noqa: E501

            Update Project can be used to change properties of a Project.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_projects_project_public_id_put(project_public_id, update_project, async_req=True)
            >>> result = thread.get()

            Args:
                project_public_id (int): The unique ID of the Project.
                update_project (UpdateProject):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Project
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_public_id'] = \
                project_public_id
            kwargs['update_project'] = \
                update_project
            return self.call_with_http_info(**kwargs)

        self.api_v3_projects_project_public_id_put = _Endpoint(
            settings={
                'response_type': (Project,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/projects/{project-public-id}',
                'operation_id': 'api_v3_projects_project_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_public_id',
                    'update_project',
                ],
                'required': [
                    'project_public_id',
                    'update_project',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_public_id':
                        (int,),
                    'update_project':
                        (UpdateProject,),
                },
                'attribute_map': {
                    'project_public_id': 'project-public-id',
                },
                'location_map': {
                    'project_public_id': 'path',
                    'update_project': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_projects_project_public_id_put
        )

        def __api_v3_projects_project_public_id_stories_get(
            self,
            project_public_id,
            get_project_stories,
            **kwargs
        ):
            """List Stories  # noqa: E501

            List Stories returns a list of all Stories in a selected Project and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_projects_project_public_id_stories_get(project_public_id, get_project_stories, async_req=True)
            >>> result = thread.get()

            Args:
                project_public_id (int): The unique ID of the Project.
                get_project_stories (GetProjectStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorySlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['project_public_id'] = \
                project_public_id
            kwargs['get_project_stories'] = \
                get_project_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_projects_project_public_id_stories_get = _Endpoint(
            settings={
                'response_type': ([StorySlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/projects/{project-public-id}/stories',
                'operation_id': 'api_v3_projects_project_public_id_stories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'project_public_id',
                    'get_project_stories',
                ],
                'required': [
                    'project_public_id',
                    'get_project_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'project_public_id':
                        (int,),
                    'get_project_stories':
                        (GetProjectStories,),
                },
                'attribute_map': {
                    'project_public_id': 'project-public-id',
                },
                'location_map': {
                    'project_public_id': 'path',
                    'get_project_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_projects_project_public_id_stories_get
        )

        def __api_v3_repositories_get(
            self,
            **kwargs
        ):
            """List Repositories  # noqa: E501

            List Repositories returns a list of all Repositories and their attributes.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_repositories_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Repository]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_repositories_get = _Endpoint(
            settings={
                'response_type': ([Repository],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/repositories',
                'operation_id': 'api_v3_repositories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_repositories_get
        )

        def __api_v3_repositories_repo_public_id_get(
            self,
            repo_public_id,
            **kwargs
        ):
            """Get Repository  # noqa: E501

            Get Repository returns information about the selected Repository.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_repositories_repo_public_id_get(repo_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                repo_public_id (int): The unique ID of the Repository.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Repository
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['repo_public_id'] = \
                repo_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_repositories_repo_public_id_get = _Endpoint(
            settings={
                'response_type': (Repository,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/repositories/{repo-public-id}',
                'operation_id': 'api_v3_repositories_repo_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'repo_public_id',
                ],
                'required': [
                    'repo_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'repo_public_id':
                        (int,),
                },
                'attribute_map': {
                    'repo_public_id': 'repo-public-id',
                },
                'location_map': {
                    'repo_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_repositories_repo_public_id_get
        )

        def __api_v3_search_epics_get(
            self,
            search,
            **kwargs
        ):
            """Search Epics  # noqa: E501

            Search Epics lets you search Epics based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new Epics being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_search_epics_get(search, async_req=True)
            >>> result = thread.get()

            Args:
                search (Search):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                EpicSearchResults
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['search'] = \
                search
            return self.call_with_http_info(**kwargs)

        self.api_v3_search_epics_get = _Endpoint(
            settings={
                'response_type': (EpicSearchResults,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/search/epics',
                'operation_id': 'api_v3_search_epics_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'search',
                ],
                'required': [
                    'search',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search':
                        (Search,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'search': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_search_epics_get
        )

        def __api_v3_search_get(
            self,
            search,
            **kwargs
        ):
            """Search  # noqa: E501

            Search lets you search Epics and Stories based on desired parameters. Since ordering of the results can change over time (due to search ranking decay, new Epics and Stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_search_get(search, async_req=True)
            >>> result = thread.get()

            Args:
                search (Search):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                SearchResults
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['search'] = \
                search
            return self.call_with_http_info(**kwargs)

        self.api_v3_search_get = _Endpoint(
            settings={
                'response_type': (SearchResults,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/search',
                'operation_id': 'api_v3_search_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'search',
                ],
                'required': [
                    'search',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search':
                        (Search,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'search': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_search_get
        )

        def __api_v3_search_stories_get(
            self,
            search,
            **kwargs
        ):
            """Search Stories  # noqa: E501

            Search Stories lets you search Stories based on desired parameters. Since ordering of stories can change over time (due to search ranking decay, new stories being created), the `next` value from the previous response can be used as the path and query string for the next page to ensure stable ordering.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_search_stories_get(search, async_req=True)
            >>> result = thread.get()

            Args:
                search (Search):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StorySearchResults
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['search'] = \
                search
            return self.call_with_http_info(**kwargs)

        self.api_v3_search_stories_get = _Endpoint(
            settings={
                'response_type': (StorySearchResults,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/search/stories',
                'operation_id': 'api_v3_search_stories_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'search',
                ],
                'required': [
                    'search',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search':
                        (Search,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'search': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_search_stories_get
        )

        def __api_v3_stories_bulk_delete(
            self,
            delete_stories,
            **kwargs
        ):
            """Delete Multiple Stories  # noqa: E501

            Delete Multiple Stories allows you to delete multiple archived stories at once.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_bulk_delete(delete_stories, async_req=True)
            >>> result = thread.get()

            Args:
                delete_stories (DeleteStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['delete_stories'] = \
                delete_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_bulk_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/bulk',
                'operation_id': 'api_v3_stories_bulk_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'delete_stories',
                ],
                'required': [
                    'delete_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'delete_stories':
                        (DeleteStories,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'delete_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_bulk_delete
        )

        def __api_v3_stories_bulk_post(
            self,
            create_stories,
            **kwargs
        ):
            """Create Multiple Stories  # noqa: E501

            Create Multiple Stories allows you to create multiple stories in a single request using the same syntax as [Create Story](https://clubhouse.io/api/#create-story).  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_bulk_post(create_stories, async_req=True)
            >>> result = thread.get()

            Args:
                create_stories (CreateStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorySlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_stories'] = \
                create_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_bulk_post = _Endpoint(
            settings={
                'response_type': ([StorySlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/bulk',
                'operation_id': 'api_v3_stories_bulk_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_stories',
                ],
                'required': [
                    'create_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_stories':
                        (CreateStories,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_bulk_post
        )

        def __api_v3_stories_bulk_put(
            self,
            update_stories,
            **kwargs
        ):
            """Update Multiple Stories  # noqa: E501

            Update Multiple Stories allows you to make changes to numerous stories at once.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_bulk_put(update_stories, async_req=True)
            >>> result = thread.get()

            Args:
                update_stories (UpdateStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorySlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['update_stories'] = \
                update_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_bulk_put = _Endpoint(
            settings={
                'response_type': ([StorySlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/bulk',
                'operation_id': 'api_v3_stories_bulk_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'update_stories',
                ],
                'required': [
                    'update_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'update_stories':
                        (UpdateStories,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'update_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_bulk_put
        )

        def __api_v3_stories_post(
            self,
            create_story_params,
            **kwargs
        ):
            """Create Story  # noqa: E501

            Create Story is used to add a new story to your Clubhouse.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_post(create_story_params, async_req=True)
            >>> result = thread.get()

            Args:
                create_story_params (CreateStoryParams): Used to create multiple stories in a single request.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Story
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_story_params'] = \
                create_story_params
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_post = _Endpoint(
            settings={
                'response_type': (Story,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories',
                'operation_id': 'api_v3_stories_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_story_params',
                ],
                'required': [
                    'create_story_params',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_story_params':
                        (CreateStoryParams,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_story_params': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_post
        )

        def __api_v3_stories_search_post(
            self,
            search_stories,
            **kwargs
        ):
            """Search Stories (Old)  # noqa: E501

            Search Stories lets you search Stories based on desired parameters.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_search_post(search_stories, async_req=True)
            >>> result = thread.get()

            Args:
                search_stories (SearchStories):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [StorySlim]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['search_stories'] = \
                search_stories
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_search_post = _Endpoint(
            settings={
                'response_type': ([StorySlim],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/search',
                'operation_id': 'api_v3_stories_search_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'search_stories',
                ],
                'required': [
                    'search_stories',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'search_stories':
                        (SearchStories,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'search_stories': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_search_post
        )

        def __api_v3_stories_story_public_id_comments_comment_public_id_delete(
            self,
            story_public_id,
            comment_public_id,
            **kwargs
        ):
            """Delete Comment  # noqa: E501

            Delete a Comment from any story.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_comments_comment_public_id_delete(story_public_id, comment_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story that the Comment is in.
                comment_public_id (int): The ID of the Comment.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_comments_comment_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/comments/{comment-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_comments_comment_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'comment_public_id',
                ],
                'required': [
                    'story_public_id',
                    'comment_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'comment_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_comments_comment_public_id_delete
        )

        def __api_v3_stories_story_public_id_comments_comment_public_id_get(
            self,
            story_public_id,
            comment_public_id,
            **kwargs
        ):
            """Get Comment  # noqa: E501

            Get Comment is used to get Comment information.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_comments_comment_public_id_get(story_public_id, comment_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story that the Comment is in.
                comment_public_id (int): The ID of the Comment.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Comment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_comments_comment_public_id_get = _Endpoint(
            settings={
                'response_type': (Comment,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/comments/{comment-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_comments_comment_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'comment_public_id',
                ],
                'required': [
                    'story_public_id',
                    'comment_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'comment_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_comments_comment_public_id_get
        )

        def __api_v3_stories_story_public_id_comments_comment_public_id_put(
            self,
            story_public_id,
            comment_public_id,
            update_comment,
            **kwargs
        ):
            """Update Comment  # noqa: E501

            Update Comment replaces the text of the existing Comment.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_comments_comment_public_id_put(story_public_id, comment_public_id, update_comment, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story that the Comment is in.
                comment_public_id (int): The ID of the Comment
                update_comment (UpdateComment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Comment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            kwargs['update_comment'] = \
                update_comment
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_comments_comment_public_id_put = _Endpoint(
            settings={
                'response_type': (Comment,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/comments/{comment-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_comments_comment_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'comment_public_id',
                    'update_comment',
                ],
                'required': [
                    'story_public_id',
                    'comment_public_id',
                    'update_comment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                    'update_comment':
                        (UpdateComment,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'comment_public_id': 'path',
                    'update_comment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_comments_comment_public_id_put
        )

        def __api_v3_stories_story_public_id_comments_comment_public_id_reactions_delete(
            self,
            story_public_id,
            comment_public_id,
            create_or_delete_reaction,
            **kwargs
        ):
            """Delete Reaction  # noqa: E501

            Delete a Reaction from any comment.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_comments_comment_public_id_reactions_delete(story_public_id, comment_public_id, create_or_delete_reaction, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story that the Comment is in.
                comment_public_id (int): The ID of the Comment.
                create_or_delete_reaction (CreateOrDeleteReaction):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            kwargs['create_or_delete_reaction'] = \
                create_or_delete_reaction
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_comments_comment_public_id_reactions_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions',
                'operation_id': 'api_v3_stories_story_public_id_comments_comment_public_id_reactions_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'comment_public_id',
                    'create_or_delete_reaction',
                ],
                'required': [
                    'story_public_id',
                    'comment_public_id',
                    'create_or_delete_reaction',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                    'create_or_delete_reaction':
                        (CreateOrDeleteReaction,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'comment_public_id': 'path',
                    'create_or_delete_reaction': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_comments_comment_public_id_reactions_delete
        )

        def __api_v3_stories_story_public_id_comments_comment_public_id_reactions_post(
            self,
            story_public_id,
            comment_public_id,
            create_or_delete_reaction,
            **kwargs
        ):
            """Create Reaction  # noqa: E501

            Create a reaction to a comment.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_comments_comment_public_id_reactions_post(story_public_id, comment_public_id, create_or_delete_reaction, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story that the Comment is in.
                comment_public_id (int): The ID of the Comment.
                create_or_delete_reaction (CreateOrDeleteReaction):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Reaction]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['comment_public_id'] = \
                comment_public_id
            kwargs['create_or_delete_reaction'] = \
                create_or_delete_reaction
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_comments_comment_public_id_reactions_post = _Endpoint(
            settings={
                'response_type': ([Reaction],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/comments/{comment-public-id}/reactions',
                'operation_id': 'api_v3_stories_story_public_id_comments_comment_public_id_reactions_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'comment_public_id',
                    'create_or_delete_reaction',
                ],
                'required': [
                    'story_public_id',
                    'comment_public_id',
                    'create_or_delete_reaction',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'comment_public_id':
                        (int,),
                    'create_or_delete_reaction':
                        (CreateOrDeleteReaction,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'comment_public_id': 'comment-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'comment_public_id': 'path',
                    'create_or_delete_reaction': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_comments_comment_public_id_reactions_post
        )

        def __api_v3_stories_story_public_id_comments_post(
            self,
            story_public_id,
            create_comment,
            **kwargs
        ):
            """Create Comment  # noqa: E501

            Create Comment allows you to create a Comment on any Story.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_comments_post(story_public_id, create_comment, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story that the Comment is in.
                create_comment (CreateComment):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Comment
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['create_comment'] = \
                create_comment
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_comments_post = _Endpoint(
            settings={
                'response_type': (Comment,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/comments',
                'operation_id': 'api_v3_stories_story_public_id_comments_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'create_comment',
                ],
                'required': [
                    'story_public_id',
                    'create_comment',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'create_comment':
                        (CreateComment,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'create_comment': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_comments_post
        )

        def __api_v3_stories_story_public_id_delete(
            self,
            story_public_id,
            **kwargs
        ):
            """Delete Story  # noqa: E501

            Delete Story can be used to delete any Story.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_delete(story_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                ],
                'required': [
                    'story_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_delete
        )

        def __api_v3_stories_story_public_id_get(
            self,
            story_public_id,
            **kwargs
        ):
            """Get Story  # noqa: E501

            Get Story returns information about a chosen Story.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_get(story_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Story
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_get = _Endpoint(
            settings={
                'response_type': (Story,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                ],
                'required': [
                    'story_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_get
        )

        def __api_v3_stories_story_public_id_put(
            self,
            story_public_id,
            update_story,
            **kwargs
        ):
            """Update Story  # noqa: E501

            Update Story can be used to update Story properties.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_put(story_public_id, update_story, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The unique identifier of this story.
                update_story (UpdateStory):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Story
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['update_story'] = \
                update_story
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_put = _Endpoint(
            settings={
                'response_type': (Story,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'update_story',
                ],
                'required': [
                    'story_public_id',
                    'update_story',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'update_story':
                        (UpdateStory,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'update_story': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_put
        )

        def __api_v3_stories_story_public_id_tasks_post(
            self,
            story_public_id,
            create_task,
            **kwargs
        ):
            """Create Task  # noqa: E501

            Create Task is used to create a new task in a Story.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_tasks_post(story_public_id, create_task, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The ID of the Story that the Task will be in.
                create_task (CreateTask):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Task
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['create_task'] = \
                create_task
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_tasks_post = _Endpoint(
            settings={
                'response_type': (Task,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/tasks',
                'operation_id': 'api_v3_stories_story_public_id_tasks_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'create_task',
                ],
                'required': [
                    'story_public_id',
                    'create_task',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'create_task':
                        (CreateTask,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'create_task': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_tasks_post
        )

        def __api_v3_stories_story_public_id_tasks_task_public_id_delete(
            self,
            story_public_id,
            task_public_id,
            **kwargs
        ):
            """Delete Task  # noqa: E501

            Delete Task can be used to delete any previously created Task on a Story.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_tasks_task_public_id_delete(story_public_id, task_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The unique ID of the Story this Task is associated with.
                task_public_id (int): The unique ID of the Task.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['task_public_id'] = \
                task_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_tasks_task_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/tasks/{task-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_tasks_task_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'task_public_id',
                ],
                'required': [
                    'story_public_id',
                    'task_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'task_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'task_public_id': 'task-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'task_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_tasks_task_public_id_delete
        )

        def __api_v3_stories_story_public_id_tasks_task_public_id_get(
            self,
            story_public_id,
            task_public_id,
            **kwargs
        ):
            """Get Task  # noqa: E501

            Returns information about a chosen Task.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_tasks_task_public_id_get(story_public_id, task_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The unique ID of the Story this Task is associated with.
                task_public_id (int): The unique ID of the Task.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Task
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['task_public_id'] = \
                task_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_tasks_task_public_id_get = _Endpoint(
            settings={
                'response_type': (Task,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/tasks/{task-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_tasks_task_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'task_public_id',
                ],
                'required': [
                    'story_public_id',
                    'task_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'task_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'task_public_id': 'task-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'task_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_tasks_task_public_id_get
        )

        def __api_v3_stories_story_public_id_tasks_task_public_id_put(
            self,
            story_public_id,
            task_public_id,
            update_task,
            **kwargs
        ):
            """Update Task  # noqa: E501

            Update Task can be used to update Task properties.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_stories_story_public_id_tasks_task_public_id_put(story_public_id, task_public_id, update_task, async_req=True)
            >>> result = thread.get()

            Args:
                story_public_id (int): The unique identifier of the parent Story.
                task_public_id (int): The unique identifier of the Task you wish to update.
                update_task (UpdateTask):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Task
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_public_id'] = \
                story_public_id
            kwargs['task_public_id'] = \
                task_public_id
            kwargs['update_task'] = \
                update_task
            return self.call_with_http_info(**kwargs)

        self.api_v3_stories_story_public_id_tasks_task_public_id_put = _Endpoint(
            settings={
                'response_type': (Task,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/stories/{story-public-id}/tasks/{task-public-id}',
                'operation_id': 'api_v3_stories_story_public_id_tasks_task_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_public_id',
                    'task_public_id',
                    'update_task',
                ],
                'required': [
                    'story_public_id',
                    'task_public_id',
                    'update_task',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_public_id':
                        (int,),
                    'task_public_id':
                        (int,),
                    'update_task':
                        (UpdateTask,),
                },
                'attribute_map': {
                    'story_public_id': 'story-public-id',
                    'task_public_id': 'task-public-id',
                },
                'location_map': {
                    'story_public_id': 'path',
                    'task_public_id': 'path',
                    'update_task': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_stories_story_public_id_tasks_task_public_id_put
        )

        def __api_v3_story_links_post(
            self,
            create_story_link,
            **kwargs
        ):
            """Create Story Link  # noqa: E501

            Story Links (called Story Relationships in the UI) allow you create semantic relationships between two stories. The parameters read like an active voice grammatical sentence:  subject -> verb -> object.  The subject story acts on the object Story; the object story is the direct object of the sentence.  The subject story \"blocks\", \"duplicates\", or \"relates to\" the object story.  Examples: - \"story 5 blocks story 6” -- story 6 is now \"blocked\" until story 5 is moved to a Done workflow state. - \"story 2 duplicates story 1” -- Story 2 represents the same body of work as Story 1 (and should probably be archived). - \"story 7 relates to story 3”  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_story_links_post(create_story_link, async_req=True)
            >>> result = thread.get()

            Args:
                create_story_link (CreateStoryLink):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StoryLink
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['create_story_link'] = \
                create_story_link
            return self.call_with_http_info(**kwargs)

        self.api_v3_story_links_post = _Endpoint(
            settings={
                'response_type': (StoryLink,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/story-links',
                'operation_id': 'api_v3_story_links_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'create_story_link',
                ],
                'required': [
                    'create_story_link',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'create_story_link':
                        (CreateStoryLink,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'create_story_link': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_story_links_post
        )

        def __api_v3_story_links_story_link_public_id_delete(
            self,
            story_link_public_id,
            **kwargs
        ):
            """Delete Story Link  # noqa: E501

            Removes the relationship between the stories for the given Story Link.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_story_links_story_link_public_id_delete(story_link_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_link_public_id (int): The unique ID of the Story Link.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                None
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_link_public_id'] = \
                story_link_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_story_links_story_link_public_id_delete = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/story-links/{story-link-public-id}',
                'operation_id': 'api_v3_story_links_story_link_public_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_link_public_id',
                ],
                'required': [
                    'story_link_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_link_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_link_public_id': 'story-link-public-id',
                },
                'location_map': {
                    'story_link_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_story_links_story_link_public_id_delete
        )

        def __api_v3_story_links_story_link_public_id_get(
            self,
            story_link_public_id,
            **kwargs
        ):
            """Get Story Link  # noqa: E501

            Returns the stories and their relationship for the given Story Link.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_story_links_story_link_public_id_get(story_link_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                story_link_public_id (int): The unique ID of the Story Link.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StoryLink
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_link_public_id'] = \
                story_link_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_story_links_story_link_public_id_get = _Endpoint(
            settings={
                'response_type': (StoryLink,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/story-links/{story-link-public-id}',
                'operation_id': 'api_v3_story_links_story_link_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_link_public_id',
                ],
                'required': [
                    'story_link_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_link_public_id':
                        (int,),
                },
                'attribute_map': {
                    'story_link_public_id': 'story-link-public-id',
                },
                'location_map': {
                    'story_link_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_story_links_story_link_public_id_get
        )

        def __api_v3_story_links_story_link_public_id_put(
            self,
            story_link_public_id,
            update_story_link,
            **kwargs
        ):
            """Update Story Link  # noqa: E501

            Updates the stories and/or the relationship for the given Story Link.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_story_links_story_link_public_id_put(story_link_public_id, update_story_link, async_req=True)
            >>> result = thread.get()

            Args:
                story_link_public_id (int): The unique ID of the Story Link.
                update_story_link (UpdateStoryLink):

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                StoryLink
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['story_link_public_id'] = \
                story_link_public_id
            kwargs['update_story_link'] = \
                update_story_link
            return self.call_with_http_info(**kwargs)

        self.api_v3_story_links_story_link_public_id_put = _Endpoint(
            settings={
                'response_type': (StoryLink,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/story-links/{story-link-public-id}',
                'operation_id': 'api_v3_story_links_story_link_public_id_put',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'story_link_public_id',
                    'update_story_link',
                ],
                'required': [
                    'story_link_public_id',
                    'update_story_link',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'story_link_public_id':
                        (int,),
                    'update_story_link':
                        (UpdateStoryLink,),
                },
                'attribute_map': {
                    'story_link_public_id': 'story-link-public-id',
                },
                'location_map': {
                    'story_link_public_id': 'path',
                    'update_story_link': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client,
            callable=__api_v3_story_links_story_link_public_id_put
        )

        def __api_v3_teams_get(
            self,
            **kwargs
        ):
            """List Teams  # noqa: E501

            List Teams returns a list of all Teams in the organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_teams_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Team]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_teams_get = _Endpoint(
            settings={
                'response_type': ([Team],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/teams',
                'operation_id': 'api_v3_teams_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_teams_get
        )

        def __api_v3_teams_team_public_id_get(
            self,
            team_public_id,
            **kwargs
        ):
            """Get Team  # noqa: E501

            Get Team is used to get Team information.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_teams_team_public_id_get(team_public_id, async_req=True)
            >>> result = thread.get()

            Args:
                team_public_id (int): The ID of the team.

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                Team
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['team_public_id'] = \
                team_public_id
            return self.call_with_http_info(**kwargs)

        self.api_v3_teams_team_public_id_get = _Endpoint(
            settings={
                'response_type': (Team,),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/teams/{team-public-id}',
                'operation_id': 'api_v3_teams_team_public_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'team_public_id',
                ],
                'required': [
                    'team_public_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'team_public_id':
                        (int,),
                },
                'attribute_map': {
                    'team_public_id': 'team-public-id',
                },
                'location_map': {
                    'team_public_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_teams_team_public_id_get
        )

        def __api_v3_workflows_get(
            self,
            **kwargs
        ):
            """List Workflows  # noqa: E501

            List Workflows returns a list of all Workflows in the organization.  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.api_v3_workflows_get(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                [Workflow]
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.api_v3_workflows_get = _Endpoint(
            settings={
                'response_type': ([Workflow],),
                'auth': [
                    'ApiKeyAuth'
                ],
                'endpoint_path': '/api/v3/workflows',
                'operation_id': 'api_v3_workflows_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__api_v3_workflows_get
        )
